import asyncio
import sys
import ccxt.async_support as ccxt

from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTableWidget, QTableWidgetItem, QPushButton, QLabel,
                             QTextEdit, QLineEdit, QComboBox, QSplitter, QTabWidget, QMenuBar, QCheckBox)
from PyQt6.QtCore import Qt, QTimer, QThread, pyqtSignal, QObject
from PyQt6.QtGui import QAction

import pyqtgraph as pg  # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
import pandas as pd
from datetime import datetime

from logger_setup import get_logger
# –ò–º–ø–æ—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from core.bybit_connector import BybitConnector
from core.database_manager_new import AdvancedDatabaseManager
# from core.database_manager import DatabaseManager
from core.trade_executor import TradeExecutor
from core.data_fetcher import DataFetcher  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
from config import LEVERAGE, API_KEY, API_SECRET
from core.strategy_manager import StrategyManager
logger = get_logger(__name__)


# –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è GUI —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –±—ç–∫–µ–Ω–¥–æ–º
class BackendWorker(QObject):
  balance_updated = pyqtSignal(dict)
  positions_updated = pyqtSignal(list)
  db_trades_updated = pyqtSignal(list)
  log_message = pyqtSignal(str)
  active_symbols_updated = pyqtSignal(list)
  chart_data_updated = pyqtSignal(str, pd.DataFrame)
  account_balance_history_updated = pyqtSignal(pd.DataFrame)

  def __init__(self, db_manager: AdvancedDatabaseManager):
    super().__init__()
    self.db_manager = None
    self.is_running = True
    self.loop = None

    self.connector = None
    self.exchange = None
    self.data_fetcher = None
    self.trade_executor = None
    self.current_symbol_for_chart = None

  def start_event_loop(self):
    self.db_manager = AdvancedDatabaseManager()
    self.loop = asyncio.new_event_loop()
    asyncio.set_event_loop(self.loop)

    # –°–æ–∑–¥–∞—ë–º CCXT –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–≥–æ event loop
    self.exchange = ccxt.bybit({
      'apiKey': API_KEY,
      'secret': API_SECRET,
      'enableRateLimit': True,
      'timeout': 30000,
      'options': {
        'defaultType': 'linear',
        'adjustForTimeDifference': True,
        'recvWindow': 20000
      }
    })

    # –ü–µ—Ä–µ–¥–∞—ë–º exchange –≤ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    self.connector = BybitConnector(api_key=API_KEY, api_secret=API_SECRET)
    self.connector.exchange = self.exchange
    self.data_fetcher = DataFetcher(self.connector)
    self.trade_executor = TradeExecutor(self.connector, self.db_manager)
    #---------------------------------------------------------------------------------------------
    try:
      # –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
      self.loop.run_until_complete(
        asyncio.wait_for(self.exchange.load_markets(), timeout=10)
      )
      logger.info("CCXT markets loaded successfully.")
    except asyncio.TimeoutError:
      logger.warning("Timeout –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ markets CCXT. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—ã–Ω–∫–æ–≤.")
    except Exception as e:
      logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ markets CCXT: {e}", exc_info=True)
    #--------------------------------------------------------------------------------------–±—ã–ª–æ self.loop.run_until_complete(self.exchange.
    # load_markets())

    #self.loop.run_until_complete(self.exchange.load_markets())
    self.loop.create_task(self.run_tasks())

    try:
      self.loop.run_forever()
    finally:
      self.loop.run_until_complete(self.exchange.close())
      self.loop.close()

  async def run_tasks(self):
    logger.info("BackendWorker: –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
    count = 0
    while self.is_running:
      try:
        if self.connector.api_key and self.connector.api_secret:
          balance_data = await self.connector.get_account_balance()
          if balance_data:
            self.balance_updated.emit(balance_data)

          positions_data = await self.connector.fetch_positions()
          if positions_data:
            self.positions_updated.emit(positions_data)

          if count % 5 == 0:
            db_trades = self.db_manager.get_all_trades(limit=50)
            self.db_trades_updated.emit(db_trades)
            self.update_balance_chart_data()

        if self.current_symbol_for_chart and count % 2 == 0:
          pass  # –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç—É—Ç, –µ—Å–ª–∏ –Ω–∞–¥–æ

        await asyncio.sleep(10)
        count += 1
      except Exception as e:
        self.log_message.emit(f"–û—à–∏–±–∫–∞ –≤ BackendWorker: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ BackendWorker: {e}", exc_info=True)
        await asyncio.sleep(30)

  def update_balance_chart_data(self):
    all_trades = self.db_manager.get_all_trades(limit=1000)
    if not all_trades:
      return

    for trade in all_trades:
      for field in ['close_timestamp', 'open_timestamp']:
        if isinstance(trade.get(field), str):
          try:
            trade[field] = datetime.fromisoformat(trade[field])
          except Exception:
            continue

    all_trades.sort(key=lambda x: x.get('close_timestamp') or x.get('open_timestamp') or datetime.min)

    balance_history = []
    balance = 10000
    for trade in all_trades:
      timestamp = trade.get('close_timestamp') or trade.get('open_timestamp')
      pnl = trade.get('profit_loss', 0.0) or 0.0
      if trade.get('status') == 'CLOSED' and trade.get('close_timestamp'):
        balance += pnl
        balance_history.append({'timestamp': timestamp, 'balance': balance})
      elif not balance_history:
        balance_history.append({'timestamp': timestamp, 'balance': balance})

    if balance_history:
      df = pd.DataFrame(balance_history)
      df['timestamp'] = pd.to_datetime(df['timestamp'])
      df.set_index('timestamp', inplace=True)
      self.account_balance_history_updated.emit(df)

  def stop_event_loop(self):
    self.is_running = False
    if self.loop and self.loop.is_running():
      self.loop.call_soon_threadsafe(self.loop.stop)

  def manual_close_position(self, symbol: str):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –∏–∑ GUI, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω—É—Ç—Ä–∏ —Å—Ç–∞–≤–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤ loop."""
    if not self.loop or not self.loop.is_running():
      logger.error("Event loop –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤—Ä—É—á–Ω—É—é.")
      return

    async def _close():
      try:
        await self.trade_executor.close_position(symbol)
        self.log_message.emit(f"üîí –ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
      except Exception as e:
        self.log_message.emit(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ {symbol}: {e}", exc_info=True)

    asyncio.run_coroutine_threadsafe(_close(), self.loop)


class MainWindow(QMainWindow):
  def __init__(self, connector: BybitConnector, db_manager: AdvancedDatabaseManager, data_fetcher: DataFetcher,
               trade_executor: TradeExecutor,
               monitoring_service_getter: object,  #: Callable[[], List[str]],
               strategy_instances: object) -> object:   #: Dict[str, BaseStrategy]):  # –î–æ–±–∞–≤–∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    super().__init__()
    self.connector = connector
    self.db_manager = db_manager
    self.data_fetcher = data_fetcher
    self.trade_executor = trade_executor
    self.get_monitored_symbols = monitoring_service_getter  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –°–ø–∏—Å–∫–∞ ‚Ññ1
    self.strategy_instances = strategy_instances  # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

    self.setWindowTitle("–¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç Bybit v0.1 (Serious Edition)")
    self.setGeometry(100, 100, 1600, 900)

    # --- Backend Worker –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
    self.backend_thread = QThread()
    self.worker = BackendWorker(db_manager=self.db_manager)
    # self.worker = BackendWorker(db_manager=self.db_manager)
    self.worker.moveToThread(self.backend_thread)

    self.backend_thread.started.connect(self.worker.start_event_loop)
    self.backend_thread.start()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ –∫ —Å–ª–æ—Ç–∞–º GUI
    self.worker.balance_updated.connect(self.update_balance_display)
    #self.worker.open_trades_updated.connect(
      #self.update_open_trades_table)  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ positions_updated
    self.worker.positions_updated.connect(self.update_positions_table)
    self.worker.db_trades_updated.connect(self.update_db_trades_table)
    self.worker.log_message.connect(self.add_log_message)
    self.worker.active_symbols_updated.connect(self.update_active_symbols_display)
    self.worker.chart_data_updated.connect(self.update_chart_display)
    self.worker.account_balance_history_updated.connect(self.update_account_balance_chart)

    # # –ó–∞–ø—É—Å–∫ event loop –≤ –ø–æ—Ç–æ–∫–µ –≤–æ—Ä–∫–µ—Ä–∞
    # self.backend_thread.started.connect(self.worker.start_event_loop)
    # self.backend_thread.start()

    self.init_ui()
    self.load_initial_data()  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö

    # –¢–∞–π–º–µ—Ä –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ MonitoringService
    self.monitor_update_timer = QTimer(self)
    self.monitor_update_timer.timeout.connect(self.refresh_monitored_symbols_list)
    self.monitor_update_timer.start(15000)  # –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (–°–ø–∏—Å–æ–∫ ‚Ññ1 –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–∂–µ)

    self.strategy_instances = strategy_instances
    # Initialize StrategyManager


    self.strategy_manager = StrategyManager(trade_executor)
    # optional: signal callback to log
    self.strategy_manager.set_signal_callback(
    lambda symbol, sig: self.add_log_message(f"Signal {sig['signal']} from {sig['strategy_name']} on {symbol}"))


  def init_ui(self):
    # --- –ú–µ–Ω—é ---
    menubar = self.menuBar()
    file_menu = menubar.addMenu('&–§–∞–π–ª')
    exit_action = QAction('&–í—ã—Ö–æ–¥', self)
    exit_action.triggered.connect(self.close)
    file_menu.addAction(exit_action)
    # ... –¥—Ä—É–≥–∏–µ –º–µ–Ω—é (–ù–∞—Å—Ç—Ä–æ–π–∫–∏, –ü–æ–º–æ—â—å)

    # --- –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç –∏ layout ---
    main_widget = QWidget()
    self.setCentralWidget(main_widget)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º QSplitter –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–∞–Ω–µ–ª–µ–π
    main_splitter = QSplitter(Qt.Orientation.Horizontal, self)

    # --- –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è) ---
    left_panel = QWidget()
    left_layout = QVBoxLayout(left_panel)

    # --- –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ ---
    left_layout.addWidget(QLabel("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:"))
    self.strategy_checkboxes = {}
    # dynamically get available strategies

    for name in self.strategy_instances.keys():
      cb = QCheckBox(name)
      cb.stateChanged.connect(self.on_strategy_toggled)
      left_layout.addWidget(cb)
      self.strategy_checkboxes[name] = cb



    # –ë–∞–ª–∞–Ω—Å
    self.balance_label = QLabel("–ë–∞–ª–∞–Ω—Å USDT: –ó–∞–≥—Ä—É–∑–∫–∞...")
    left_layout.addWidget(self.balance_label)

    # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–°–ø–∏—Å–æ–∫ ‚Ññ1)
    left_layout.addWidget(QLabel("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–°–ø–∏—Å–æ–∫ ‚Ññ1):"))
    self.active_symbols_table = QTableWidget()
    self.active_symbols_table.setColumnCount(1)
    self.active_symbols_table.setHorizontalHeaderLabels(["–°–∏–º–≤–æ–ª"])
    self.active_symbols_table.itemClicked.connect(self.on_symbol_selected_for_chart)
    left_layout.addWidget(self.active_symbols_table)

    # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏
    manual_trade_group = QWidget()
    manual_trade_layout = QVBoxLayout(manual_trade_group)
    manual_trade_layout.addWidget(QLabel("–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"))

    self.symbol_input = QLineEdit()
    self.symbol_input.setPlaceholderText("–°–∏–º–≤–æ–ª (–Ω–∞–ø—Ä. BTCUSDT)")
    self.quantity_input = QLineEdit()
    self.quantity_input.setPlaceholderText("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    self.price_input = QLineEdit()
    self.price_input.setPlaceholderText("–¶–µ–Ω–∞ (–¥–ª—è Limit)")

    self.side_combo = QComboBox()
    self.side_combo.addItems(["BUY", "SELL"])
    self.order_type_combo = QComboBox()
    self.order_type_combo.addItems(["Market", "Limit"])

    open_button = QPushButton("–û—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é")
    open_button.clicked.connect(self.handle_manual_open)
    self.close_pos_symbol_input = QLineEdit()  # –î–ª—è –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏
    self.close_pos_symbol_input.setPlaceholderText("–°–∏–º–≤–æ–ª –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è")
    close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é (–†—ã–Ω–æ—á–Ω—ã–π)")
    close_button.clicked.connect(self.handle_manual_close)

    form_layout = QHBoxLayout()
    form_layout.addWidget(self.symbol_input)
    form_layout.addWidget(self.quantity_input)
    form_layout.addWidget(self.price_input)
    manual_trade_layout.addLayout(form_layout)

    controls_layout = QHBoxLayout()
    controls_layout.addWidget(self.side_combo)
    controls_layout.addWidget(self.order_type_combo)
    controls_layout.addWidget(open_button)
    manual_trade_layout.addLayout(controls_layout)

    close_controls_layout = QHBoxLayout()
    close_controls_layout.addWidget(QLabel("–ó–∞–∫—Ä—ã—Ç—å:"))
    close_controls_layout.addWidget(self.close_pos_symbol_input)
    close_controls_layout.addWidget(close_button)
    manual_trade_layout.addLayout(close_controls_layout)

    left_layout.addWidget(manual_trade_group)

    # –õ–æ–≥–∏
    left_layout.addWidget(QLabel("–õ–æ–≥–∏:"))
    self.log_output = QTextEdit()
    self.log_output.setReadOnly(True)
    left_layout.addWidget(self.log_output)

    main_splitter.addWidget(left_panel)

    # --- –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å (–≥—Ä–∞—Ñ–∏–∫–∏, —Ç–∞–±–ª–∏—Ü—ã —Å–¥–µ–ª–æ–∫) ---
    right_panel = QWidget()
    right_layout = QVBoxLayout(right_panel)

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
    self.tabs = QTabWidget()

    # –í–∫–ª–∞–¥–∫–∞ 1: –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    self.chart_tab = QWidget()
    chart_tab_layout = QVBoxLayout(self.chart_tab)

    self.chart_widget_pg = pg.PlotWidget()  # pyqtgraph PlotWidget
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ (TradingView-like - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤–æ)
    self.chart_widget_pg.setBackground('w')  # –ë–µ–ª—ã–π —Ñ–æ–Ω
    self.chart_widget_pg.showGrid(x=True, y=True, alpha=0.3)
    self.price_plot_item = self.chart_widget_pg.plot([], [], pen=pg.mkPen('b', width=2), name="–¶–µ–Ω–∞")  # –°–∏–Ω–∏–π –¥–ª—è —Ü–µ–Ω—ã
    # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (RSI, MA) –Ω–∞ —ç—Ç–æ—Ç –∂–µ –≥—Ä–∞—Ñ–∏–∫ –∏–ª–∏ –Ω–∞ subplots
    # self.rsi_plot_item = self.chart_widget_pg.plot([], [], pen=pg.mkPen('g', width=1), name="RSI")

    # –î–ª—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω—É–∂–µ–Ω CandlestickItem (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
    # self.candle_item = pg.CandlestickItem([], []) # –î–∞–Ω–Ω—ã–µ: (time, open, high, low, close)
    # self.chart_widget_pg.addItem(self.candle_item)

    chart_tab_layout.addWidget(self.chart_widget_pg)
    self.tabs.addTab(self.chart_tab, "–ì—Ä–∞—Ñ–∏–∫ –¶–µ–Ω—ã")

    # –í–∫–ª–∞–¥–∫–∞ 2: –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (—Å –±–∏—Ä–∂–∏)
    self.positions_tab = QWidget()
    positions_layout = QVBoxLayout(self.positions_tab)
    self.positions_table = QTableWidget()
    self.positions_table.setColumnCount(
      8)  # Symbol, Side, Size, Entry Price, Mark Price, Liq Price, P&L (unrealized), Leverage
    self.positions_table.setHorizontalHeaderLabels(
      ["–°–∏–º–≤–æ–ª", "–°—Ç–æ—Ä–æ–Ω–∞", "–†–∞–∑–º–µ—Ä", "–¶–µ–Ω–∞ –í—Ö–æ–¥–∞", "–ú–∞—Ä–∫. –¶–µ–Ω–∞", "–¶–µ–Ω–∞ –õ–∏–∫–≤.", "P/L (–ù–µ—Ä–µ–∞–ª.)", "–ü–ª–µ—á–æ"])
    positions_layout.addWidget(self.positions_table)
    self.tabs.addTab(self.positions_tab, "–û—Ç–∫—Ä—ã—Ç—ã–µ –ü–æ–∑–∏—Ü–∏–∏ (–ë–∏—Ä–∂–∞)")

    # –í–∫–ª–∞–¥–∫–∞ 3: –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ (–∏–∑ –ë–î)
    self.db_trades_tab = QWidget()
    db_trades_layout = QVBoxLayout(self.db_trades_tab)
    self.db_trades_table = QTableWidget()
    # ID, Symbol, OrderID, Strategy, Side, OpenTime, CloseTime, OpenPrice, ClosePrice, Qty, Leverage, P/L, Commission, Status
    self.db_trades_table.setColumnCount(14)
    self.db_trades_table.setHorizontalHeaderLabels([
      "ID", "–°–∏–º–≤–æ–ª", "OrderID", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–°—Ç–æ—Ä–æ–Ω–∞", "–í—Ä–µ–º—è –û—Ç–∫—Ä.", "–í—Ä–µ–º—è –ó–∞–∫—Ä.",
      "–¶–µ–Ω–∞ –û—Ç–∫—Ä.", "–¶–µ–Ω–∞ –ó–∞–∫—Ä.", "–ö–æ–ª-–≤–æ", "–ü–ª–µ—á–æ", "P/L", "–ö–æ–º–∏—Å—Å–∏—è", "–°—Ç–∞—Ç—É—Å"
    ])
    db_trades_layout.addWidget(self.db_trades_table)
    self.tabs.addTab(self.db_trades_tab, "–ò—Å—Ç–æ—Ä–∏—è –°–¥–µ–ª–æ–∫ (–ë–î)")

    # –í–∫–ª–∞–¥–∫–∞ 4: –ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    self.balance_chart_tab = QWidget()
    balance_chart_layout = QVBoxLayout(self.balance_chart_tab)
    self.balance_chart_widget_pg = pg.PlotWidget()
    self.balance_chart_widget_pg.setBackground('w')
    self.balance_chart_widget_pg.showGrid(x=True, y=True, alpha=0.3)
    self.balance_plot_item = self.balance_chart_widget_pg.plot([], [], pen=pg.mkPen('g', width=2),
                                                               name="–î–∏–Ω–∞–º–∏–∫–∞ –ë–∞–ª–∞–Ω—Å–∞")
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    axis = pg.DateAxisItem(orientation='bottom')
    self.balance_chart_widget_pg.setAxisItems({'bottom': axis})
    balance_chart_layout.addWidget(self.balance_chart_widget_pg)
    self.tabs.addTab(self.balance_chart_tab, "–î–∏–Ω–∞–º–∏–∫–∞ –ë–∞–ª–∞–Ω—Å–∞")

    right_layout.addWidget(self.tabs)
    main_splitter.addWidget(right_panel)
    main_splitter.setSizes([400, 1200])  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π

    main_layout_overall = QHBoxLayout(main_widget)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º QHBoxLayout –¥–ª—è QSplitter
    main_layout_overall.addWidget(main_splitter)

    self.add_log_message("GUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

  def on_strategy_toggled(self, state):
    # Called when user toggles strategy enable/disable

    sender = self.sender()
    strat_name = sender.text()
    enabled = sender.isChecked()
    # Update StrategyManager
    symbols = self.get_monitored_symbols()

    for symbol in symbols:

      if enabled:
        strat = self.strategy_instances[strat_name]
      self.strategy_manager.register_strategy(symbol, strat)
    else:
      self.strategy_manager.unregister_strategy(symbol, strat_name)



  def load_initial_data(self):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ GUI."""
    self.add_log_message("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    self.refresh_monitored_symbols_list()  # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ‚Ññ1
    # –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ worker (–æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω)
    # Worker —Å–∞–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —è–≤–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

  def refresh_monitored_symbols_list(self):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
    symbols = self.get_monitored_symbols()  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ MonitoringService
    self.update_active_symbols_display(symbols)

  # --- –°–ª–æ—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI ---
  def update_balance_display(self, balance_data: dict):
    # { 'free': ..., 'used': ..., 'total': ... } - –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç CCXT –¥–ª—è USDT
    total_balance = balance_data.get('total', 'N/A')
    free_balance = balance_data.get('free', 'N/A')
    self.balance_label.setText(f"–ë–∞–ª–∞–Ω—Å USDT: –í—Å–µ–≥–æ={total_balance} | –î–æ—Å—Ç—É–ø–Ω–æ={free_balance}")

  def update_positions_table(self, positions: list):
    self.positions_table.setRowCount(0)  # –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
    if not positions:
      return
    self.positions_table.setRowCount(len(positions))
    for row, pos in enumerate(positions):
      # –î–∞–Ω–Ω—ã–µ –∏–∑ CCXT fetch_positions
      self.positions_table.setItem(row, 0, QTableWidgetItem(str(pos.get('symbol'))))
      side = pos.get('side', 'N/A')  # 'long' or 'short' or None
      contracts = float(pos.get('contracts', 0))
      display_side = "BUY" if side == 'long' else ("SELL" if side == 'short' else "N/A")
      if side is None and contracts != 0:  # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä—É, –µ—Å–ª–∏ 'side' –Ω–µ—Ç
        display_side = "BUY" if contracts > 0 else "SELL"

      self.positions_table.setItem(row, 1, QTableWidgetItem(display_side))
      self.positions_table.setItem(row, 2, QTableWidgetItem(f"{contracts:.4f}"))  # –†–∞–∑–º–µ—Ä
      self.positions_table.setItem(row, 3, QTableWidgetItem(str(pos.get('entryPrice', 'N/A'))))
      self.positions_table.setItem(row, 4, QTableWidgetItem(str(pos.get('markPrice', 'N/A'))))
      self.positions_table.setItem(row, 5, QTableWidgetItem(str(pos.get('liquidationPrice', 'N/A'))))
      self.positions_table.setItem(row, 6, QTableWidgetItem(f"{float(pos.get('unrealisedPnl', 0)):.2f}"))
      self.positions_table.setItem(row, 7, QTableWidgetItem(str(pos.get('leverage', 'N/A'))))
    self.positions_table.resizeColumnsToContents()

  def update_db_trades_table(self, trades: list):
    self.db_trades_table.setRowCount(0)
    if not trades:
      return
    self.db_trades_table.setRowCount(len(trades))
    for row, trade in enumerate(trades):
      self.db_trades_table.setItem(row, 0, QTableWidgetItem(str(trade.get('id'))))
      self.db_trades_table.setItem(row, 1, QTableWidgetItem(str(trade.get('symbol'))))
      self.db_trades_table.setItem(row, 2, QTableWidgetItem(str(trade.get('order_id'))))
      self.db_trades_table.setItem(row, 3, QTableWidgetItem(str(trade.get('strategy'))))
      self.db_trades_table.setItem(row, 4, QTableWidgetItem(str(trade.get('side'))))
      self.db_trades_table.setItem(row, 5, QTableWidgetItem(str(trade.get('open_timestamp'))))
      self.db_trades_table.setItem(row, 6, QTableWidgetItem(str(trade.get('close_timestamp', 'N/A'))))
      self.db_trades_table.setItem(row, 7, QTableWidgetItem(str(trade.get('open_price'))))
      self.db_trades_table.setItem(row, 8, QTableWidgetItem(str(trade.get('close_price', 'N/A'))))
      self.db_trades_table.setItem(row, 9, QTableWidgetItem(str(trade.get('quantity'))))
      self.db_trades_table.setItem(row, 10, QTableWidgetItem(str(trade.get('leverage'))))
      self.db_trades_table.setItem(row, 11, QTableWidgetItem(
        f"{trade.get('profit_loss', 0.0):.2f}" if trade.get('profit_loss') is not None else "N/A"))
      self.db_trades_table.setItem(row, 12, QTableWidgetItem(
        f"{trade.get('commission', 0.0):.4f}" if trade.get('commission') is not None else "N/A"))
      self.db_trades_table.setItem(row, 13, QTableWidgetItem(str(trade.get('status'))))
    self.db_trades_table.resizeColumnsToContents()

  def add_log_message(self, message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    self.log_output.append(f"[{timestamp}] {message}")
    self.log_output.ensureCursorVisible()  # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞

  def update_active_symbols_display(self, symbols: list):
    self.active_symbols_table.setRowCount(0)
    if not symbols: return
    self.active_symbols_table.setRowCount(len(symbols))
    for row, symbol_name in enumerate(sorted(symbols)):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      self.active_symbols_table.setItem(row, 0, QTableWidgetItem(symbol_name))
    self.active_symbols_table.resizeColumnsToContents()
    for strat_name, cb in self.strategy_checkboxes.items():
      if cb.isChecked():
        strat = self.strategy_instances[strat_name]
        for sym in symbols:
          self.strategy_manager.register_strategy(sym, strat)

  def on_symbol_selected_for_chart(self, item: QTableWidgetItem):
    symbol = item.text()
    self.add_log_message(f"–í—ã–±—Ä–∞–Ω —Å–∏–º–≤–æ–ª –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {symbol}")
    self.worker.current_symbol_for_chart = symbol  # –°–æ–æ–±—â–∞–µ–º –≤–æ—Ä–∫–µ—Ä—É, –∫–∞–∫–æ–π —Å–∏–º–≤–æ–ª –æ–±–Ω–æ–≤–ª—è—Ç—å

    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Ç.–∫. –≤–æ—Ä–∫–µ—Ä –∏ —Ç–∞–∫ –æ–±–Ω–æ–≤–∏—Ç)
    # asyncio.create_task(self.request_chart_data_for_symbol(symbol))
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º, –∫–æ–≥–¥–∞ –≤–æ—Ä–∫–µ—Ä –æ–±–Ω–æ–≤–∏—Ç. –ò–ª–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
    # –î–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –≤ data_fetcher –∑–¥–µ—Å—å,
    # –Ω–æ —ç—Ç–æ –Ω–∞—Ä—É—à–∏–ª–æ –±—ã –ø–æ—Ç–æ–∫ GUI -> Worker.
    # –õ—É—á—à–µ, –µ—Å–ª–∏ Worker —Å–∞–º —Å–ª–µ–¥–∏—Ç –∑–∞ current_symbol_for_chart.
    # –ß—Ç–æ–±—ã –≥—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–∏–ª—Å—è –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ, –º–æ–∂–Ω–æ:
    async def temp_fetch():
      klines_df = await self.data_fetcher.get_historical_data(symbol, timeframe='5m', limit=100)
      if not klines_df.empty:
        self.update_chart_display(symbol, klines_df)

    if hasattr(asyncio, 'get_running_loop'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ event loop
      try:
        loop = asyncio.get_running_loop()
        if loop.is_running():
          asyncio.create_task(temp_fetch())
        else:  # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –≤ –ø–æ—Ç–æ–∫–µ –≤–æ—Ä–∫–µ—Ä–∞, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
          self.add_log_message("Event loop –Ω–µ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
      except RuntimeError:  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ event loop
        self.add_log_message("–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ event loop –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
    else:  # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python, –≥–¥–µ –Ω–µ—Ç get_running_loop
      asyncio.ensure_future(temp_fetch())

  def update_chart_display(self, symbol: str, df: pd.DataFrame):
    if symbol != self.worker.current_symbol_for_chart:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏ –¥–ª—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
      return

    self.add_log_message(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol} ({len(df)} —Ç–æ—á–µ–∫)")
    if 'close' not in df.columns:
      self.add_log_message(f"–û—à–∏–±–∫–∞: –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ 'close' –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ {symbol}")
      return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å datetime –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è pyqtgraph
    # timestamps = df.index.astype(np.int64) // 10**9 # –≤ —Å–µ–∫—É–Ω–¥—ã
    timestamps = [dt.timestamp() for dt in df.index]

    self.price_plot_item.setData(x=timestamps, y=df['close'].values)
    self.chart_widget_pg.setTitle(f"–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã: {symbol}")
    # self.chart_widget_pg.autoRange() # –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

    # –ï—Å–ª–∏ –µ—Å—Ç—å RSI, –º–æ–∂–Ω–æ –µ–≥–æ —Ç–æ–∂–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º subplot)
    # if 'rsi' in df.columns:
    #     self.rsi_plot_item.setData(x=timestamps, y=df['rsi'].values)

  def update_account_balance_chart(self, df_balance: pd.DataFrame):
    if df_balance.empty:
      self.add_log_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞.")
      return

    self.add_log_message(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞ ({len(df_balance)} —Ç–æ—á–µ–∫)")
    timestamps = [dt.timestamp() for dt in df_balance.index]
    balances = df_balance['balance'].values

    self.balance_plot_item.setData(x=timestamps, y=balances)
    self.balance_chart_widget_pg.setTitle("–î–∏–Ω–∞–º–∏–∫–∞ –ë–∞–ª–∞–Ω—Å–∞ –°—á–µ—Ç–∞ (–°–∏–º—É–ª—è—Ü–∏—è –ø–æ –ó–∞–∫—Ä—ã—Ç—ã–º –°–¥–µ–ª–∫–∞–º)")
    # self.balance_chart_widget_pg.autoRange()

  # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
  def handle_manual_open(self):
    symbol = self.symbol_input.text().upper().strip()
    quantity_str = self.quantity_input.text().strip()
    price_str = self.price_input.text().strip()
    side = self.side_combo.currentText().lower()
    order_type = self.order_type_combo.currentText()

    if not symbol or not quantity_str:
      self.add_log_message("–û—à–∏–±–∫–∞: –°–∏–º–≤–æ–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞.")
      return
    try:
      quantity = float(quantity_str)
      price = float(price_str) if price_str and order_type.lower() == 'limit' else None
      if quantity <= 0:
        self.add_log_message("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        return
      if order_type.lower() == 'limit' and (price is None or price <= 0):
        self.add_log_message("–û—à–∏–±–∫–∞: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –∏ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return

      # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ø–æ—Ç–æ–∫–µ –≤–æ—Ä–∫–µ—Ä–∞
      asyncio.run_coroutine_threadsafe(
        self.worker.manual_open_position(symbol, side, quantity, order_type, price),
        asyncio.get_event_loop()
        # –ü–æ–ª—É—á–∞–µ–º event loop –ø–æ—Ç–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ—Ä–∫–µ—Ä (–Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω)
        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ GUI –Ω–µ –∏–º–µ–µ—Ç —Å–≤–æ–µ–≥–æ event loop.
        # –õ—É—á—à–µ, –µ—Å–ª–∏ –±—ã worker –∏–º–µ–ª –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ,
        # –∞ –æ–Ω —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ —Å–≤–æ–π asyncio loop.

        # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ –º–µ–Ω–µ–µ –∏–∑—è—â–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤, –µ—Å–ª–∏ worker –≤ —Ç–æ–º –∂–µ –ø–æ—Ç–æ–∫–µ:
        # asyncio.create_task(self.worker.manual_open_position(...))
        # –ù–æ worker –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ç–æ–∫–µ, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–µ–Ω –º–µ—Ö–∞–Ω–∏–∑–º –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ async –º–µ—Ç–æ–¥–∞.

        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¢.–∫. self.backend_thread.started.connect –∑–∞–ø—É—Å–∫–∞–µ—Ç asyncio.create_task(self.worker.run_tasks()),
        # —Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å event loop –≤ self.backend_thread.
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–æ—Ä—É—Ç–∏–Ω—É –≤ —ç—Ç–æ—Ç loop.
      ).result(timeout=10)  # –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã GUI –Ω–µ –∑–∞–≤–∏—Å–∞–ª, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫ —Å –∑–∞–ø—É—Å–∫–æ–º
      # .result() —Å–¥–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ –±–ª–æ–∫–∏—Ä—É—é—â–∏–º, —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –¥–ª—è GUI.
      # –õ—É—á—à–µ:
      # future = asyncio.run_coroutine_threadsafe(...)
      # future.add_done_callback(lambda f: self.log_message.emit(f"Manual open task status: {f.exception()}"))
      # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ–º –∂–¥–∞—Ç—å result.
      # –ì–ª–∞–≤–Ω–æ–µ - –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å event loop'–∞ –≤–æ—Ä–∫–µ—Ä–∞.

      # –ù–∞–∏–±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥: QObject.invokemethod –∏–ª–∏ —Å–∏–≥–Ω–∞–ª-—Å–ª–æ—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ –≤–æ—Ä–∫–µ—Ä–∞,
      # –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è (–≤ —Å–≤–æ–µ–º –ø–æ—Ç–æ–∫–µ) –≤—ã–∑–æ–≤–µ—Ç async-–º–µ—Ç–æ–¥.
      # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º—ã –º–æ–∂–µ–º –ø–æ–ª–æ–∂–∏—Ç—å—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤–æ—Ä–∫–µ—Ä –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É.
      # –õ–∏–±–æ, –µ—Å–ª–∏ MainApp (—Å–º. main.py) –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ event loop, —á–µ—Ä–µ–∑ –Ω–µ–≥–æ.
      # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ: —Å–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥—ã –≤ Worker –ù–ï async, –∞ –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.create_task.
      # –≠—Ç–æ –∏–∑–±–µ–∂–∏—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π —Å run_coroutine_threadsafe.
      # –û–¥–Ω–∞–∫–æ, —Ç.–∫. trade_executor –º–µ—Ç–æ–¥—ã async, —Ç–æ –∏ –≤—ã–∑—ã–≤–∞—é—â–∏–µ –∏—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å async.
      # –ü–µ—Ä–µ–¥–µ–ª–∞–µ–º BackendWorker —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ –±—ã–ª–∏ –æ–±—ã—á–Ω—ã–º–∏,
      # –∞ –≤–Ω—É—Ç—Ä–∏ –æ–Ω–∏ —É–∂–µ –≤—ã–∑—ã–≤–∞–ª–∏ asyncio.create_task(self._async_actual_method())

      # –ü–æ–∫–∞ —á—Ç–æ, –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ç–∞, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –≤—ã–∑–æ–≤ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç:
      # (–≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –∏ asyncio)
      # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ, –µ—Å–ª–∏ –≤ MainWindow –º—ã —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è event_loop, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç–æ–º
      if hasattr(self, 'async_loop') and self.async_loop.is_running():
        asyncio.run_coroutine_threadsafe(
          self.worker.manual_open_position(symbol, side, quantity, order_type, price),
          self.async_loop
        )
      else:  # –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ
        self.add_log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ (event loop).")


    except ValueError:
      self.add_log_message("–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
    except Exception as e:
      self.add_log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è: {e}")
      logger.error(f"GUI handle_manual_open error: {e}", exc_info=True)

  def handle_manual_close(self):
    symbol = self.close_pos_symbol_input.text().upper().strip()
    if not symbol:
      self.add_log_message("–û—à–∏–±–∫–∞: –°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏.")
      return

    # –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ —Ç–∞–±–ª–∏—Ü–µ positions_table (–¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏)
    # –∏–ª–∏ –≤ db_trades_table (–Ω–∞—à–∏ –∑–∞–ø–∏—Å–∏).
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ trade_executor.close_position —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è,
    # –µ—Å–ª–∏ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª.
    # open_order_id –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏, –µ—Å–ª–∏ –º—ã –µ–≥–æ –≥–¥–µ-—Ç–æ —Ö—Ä–∞–Ω–∏–º –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ GUI.

    # –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –≤ event loop –≤–æ—Ä–∫–µ—Ä–∞
    if hasattr(self, 'async_loop') and self.async_loop.is_running():
      asyncio.run_coroutine_threadsafe(
        self.worker.manual_close_position(symbol=symbol),  # open_order_id=None
        self.async_loop
      )
    else:
      self.add_log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ (event loop).")


  def closeEvent(self, event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
    self.add_log_message("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã GUI...")
    self.worker.is_running = False  # –°–∏–≥–Ω–∞–ª –≤–æ—Ä–∫–µ—Ä—É –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
    self.backend_thread.quit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ—Ç–æ–∫ Qt
    self.backend_thread.wait(5000)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)

    # –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ–≥–æ –±–æ—Ç–∞ (MonitoringService, —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ —Ç.–¥.)
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ main.py

    super().closeEvent(event)